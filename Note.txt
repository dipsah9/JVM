2) Linking 
Linking consists of three activities:
a)Verify
b)Preparation
c)Resolve

Verification:
ByteCode Verifier: Test.class. => IF the bytecode does not match, it will throw verify error. (good for security)   
process of ensuring that binary representation of a class is structurally correct or not. 
JVM will check whether .class generated by valid compiler or not. 
Who is responsible ? => internally bytecode Verifier is responsible for this activities. 
Bytecode Verifier is a part of class loader subsystem. 
if verification fails then we will get runtime exception. saying java.lang.verifyError

Preparation:
In this process JVM will allocate memory for class level static varibles and assign default values. In initiliazation phase original values will 
be assigned to the staic varibles and here only default values will be assigned.

Resolve: 
It is the process of replacing symbolic names in our programm with original memory references from method area.
Example: 
class Test{
    public static void main(String[] args){
        String s = new String("Deep");
        Student s1 = new Student();
    }
}

When we are loading child class, automatically parent class will be loaded. 
Test.class
Object.class
String.class
Student.class

Every symbol is itself a constant. 
For the above class, classLoader loads Test.class, String.class, Student.class and Object.class. 
The names of these classes are stored in constant pool of Test class. 
In resolution phase, these names are replaced with original memory level references from method area. 

Initiliazation: 
In this all static variables are assigned with original values under static blocks will be executed from parent to child and from top to bottom. 

NOTE: THESE ALL COMES UNDER CLASS LOADER SUBSYSTEM. 

While loading, linking and initiliazation, if any error occurs then we will get runtime exception saying java.lang.linkageError


Types of classLoader:
1) Bootstrap classLoader also called primordial
2) Extension classLoader
3) Application classLoader / System classLoader



Bootstrap classLoader: (rt.jar => jdk - jre - lib - rt.jar)
Bootstrap classLoader is responsible to load core java API classes. i.e The classes present in rt.jar
This location is called boot class path. i.e Bootstrap classLoader is responsible to load classes from boot strap class path. 
Bootstrap classLoader is by default available with every JVM. It is implemented in native languages like c/c++ and not implemented in java. 


Extension classLoader: (jdk->jre->lib->ext)
It is child class of Bootstrap classLoader. It is responsible to load classes from Extension class path. 





